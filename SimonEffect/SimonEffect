#%% HEADER ---------------------------
# Note: Simon Experiment 
# Blue box appears in left and red box appears in right of fixation point and 
# participants are asked to press the arrow keys respectively.

response_matching = simple_matching;
active_buttons = 2;


#%% SDL ------------------------------
begin;

# array for color boxes 
array{
	box{width = 100; height = 100; color = 255,0,0; description = "red";} redBox;
	box{width = 100; height = 100; color = 0,0,255; description = "blue";};
} coloredBox;

# for stimulus
picture{
	box redBox;
	x = 0; y = 0;
} stim;

# for fixation
picture{
	text{
		caption = "+";
		font_size = 48;
	};
	x = 0; y = 0;
} fixation;

trial{
	# trial properties
	# making stim presented until responses
	trial_duration = forever;
	trial_type = first_response;
	all_responses = false;

	# fixation cross
	stimulus_event{
		picture fixation;
		# code = "fix";
		time = 0;
	};
	
	# stimulus
	stimulus_event{
		picture stim;
		time = 250;
		code = "stim";
		
		# making the stimulus to be responded
		response_active = true;
	} stim_event;
} mainTrial;


# setting up feedback related to user response
trial{
	trial_duration = 1000;
	picture{
		text{caption =""; font_size =24;} feedbackText;
		x = 0; y = 0;
	} feedbackPic;
} feedbackTrial;




#%% PCL ------------------------------
begin_pcl;

# parameters 
int CLR = 1;					# for color index in trialList aray
int POS = 2;					# for x-pos index in trialList aray
int repeat = 3;				# repeat of color-position combo
int slowResponse = 1000;	# time considered as a slow response

# array of x positions
array <int> xPos[] = {-200,200};
array <string> xPos_codes[] ={"left","right"};
# array to store the index of color and x-position
array <int> trialList[0][2]; 


# creating trial list
# loop over colored boxes
loop int iColor=1 until iColor>coloredBox.count()
begin
	# loop over x-pos
	loop int iPos=1 until iPos>xPos.count()
	begin
		# temporarily storing iColor and iPos
		array <int>temp[2];
		temp[CLR] = iColor;
		temp[POS] = iPos;
		
		# loop over repeats
		loop int iRep=1 until iRep>repeat
		begin
			trialList.add(temp);
			iRep = iRep+1;
		end;
		iPos = iPos+1;
	end;
	iColor = iColor+1;
end;

# randomise trial order
trialList.shuffle();

# presetn trials 
loop int iTrial=1 until iTrial>trialList.count()
begin
	int position = trialList[iTrial][POS];
	box color = coloredBox[trialList[iTrial][CLR]];
	
	# setting even code (color and position)
	stim_event.set_event_code(color.description() + ";" + xPos_codes[position]);
	
	# setting correct response (
	# Note: Response in setting, item 1 is 'F' for red box and item 2 is 'J' 
	# for blue box, which is in the same order as respective color in coloredBox)
	stim_event.set_target_button(trialList[iTrial][CLR]);
	# selecting color
	stim.set_part(1, color);	
	# selecting x-pos
	stim.set_part_x(1, xPos[position]);
	
	# run trial
	mainTrial.present();
	
	# feedback
	string new_caption;
	# checking if the response was correct
	stimulus_data last = stimulus_manager.last_stimulus_data();
	if(last.type()==last.HIT) then
		new_caption = "Correct";
	else 
		new_caption = "Incorrect";
	end;
	
	# checking if the response was slow
	if(last.reaction_time()>slowResponse) then
		new_caption = new_caption + "\n\nPlease respond faster!";
	end; 
	
	# present feedback
	feedbackText.set_caption(new_caption, true);
	feedbackTrial.present();
	
	iTrial = iTrial+1;
end; 

